---
layout: layouts/base.njk
title: "Reading · 阅读"
description: "读书卡片与短评。记录阅读过程中的思考和收获，分享有价值的书籍和文章，建立个人的阅读体系。"
section: "zhi"
pageName: "reading"
pageCSS: "/assets/Css/reading.css"
---

<!-- Main Content -->
<section class="reading-main">
  
  <!-- Container1: 搜索、分类 (极简风格) -->
  <div class="reading-container1">
    <div class="reading-controls">
      <!-- 搜索部分 -->
      <div class="control-section search-section">
        <input type="text" id="readingSearch" placeholder="搜索书籍、作者或标签..." />
      </div>
      
      <!-- 分类部分 -->
      <div class="control-section category-section">
        <button class="control-btn active" data-filter="all">全部</button>
        <button class="control-btn" data-filter="设计">设计</button>
        <button class="control-btn" data-filter="技术">技术</button>
        <button class="control-btn" data-filter="商业">商业</button>
        <button class="control-btn" data-filter="心理学">心理学</button>
      </div>
    </div>
    
    <!-- 分隔线 -->
    <div class="reading-divider"></div>
  </div>

  <!-- Container2: 书籍卡片横向滚动 -->
  <div class="reading-container2">
    <button class="scroll-btn scroll-left" id="scrollLeft">←</button>
    
    <div class="books-scroll-container" id="booksScroll">
      <div class="books-scroll-track">
        {% for book in collections.reading %}
        <div class="book-card" 
             data-category="{{ book.data.category or '未分类' }}"
             data-rating="{{ book.data.rating or 0 }}"
             data-title="{{ book.data.title | lower }}"
             data-author="{{ book.data.author | lower }}"
             data-tags="{{ book.data.tags | join(' ') | lower }}">
          
          <div class="book-content">
            <!-- 左侧分隔线容器 -->
            <div class="book-line">
              <div class="book-divider-vertical"></div>
            </div>
            
            <!-- 右侧主要内容容器 -->
            <div class="book-main">
              <!-- 上方：书籍基本信息 -->
              <div class="book-intro">
                <!-- 封面 -->
                <div class="book-cover">
                  {% if book.data.cover %}
                    <img src="{{ book.data.cover }}" alt="{{ book.data.title }}">
                  {% else %}
                    <div class="book-placeholder">
                      <span>{{ book.data.title | slice(0, 2) }}</span>
                    </div>
                  {% endif %}
                </div>
                
                <!-- 书名 -->
                <h3 class="book-title">
                  <a href="{{ book.url }}">{{ book.data.title }}</a>
                </h3>
                
                <!-- 作者+年份 -->
                <div class="book-meta">
                  <span class="book-author">{{ book.data.author or "未知作者" }}</span>
                  {% if book.data.date %}
                    <span class="book-year">{{ book.data.date.getFullYear() }}</span>
                  {% else %}
                    <span class="book-year">2024</span>
                  {% endif %}
                </div>
                
                <!-- 简介 -->
                <div class="book-summary">
                  {{ book.data.description or "暂无简介" }}
                </div>
              </div>
              
              <!-- 分隔线 -->
              <div class="book-divider-horizontal"></div>
              
              <!-- 下方：读书笔记内容 -->
              <div class="book-note">
                <div class="note-content">
                  {% if book.templateContent %}
                    <div class="note-titles-container" data-content="{{ book.templateContent | trim | replace('\n', '|') }}">
                      <div class="note-placeholder">正在加载章节...</div>
                    </div>
                  {% else %}
                    <div class="note-placeholder">暂无笔记内容</div>
                  {% endif %}
                </div>
              </div>
            </div>
          </div>
        </div>
        {% endfor %}
        
        <!-- 空状态 -->
        {% if collections.reading | length == 0 %}
        <div class="empty-state">
          <h3>暂无读书笔记</h3>
          <p>还没有记录任何读书内容，<a href="/zhi/collection/">去收集一些好书</a>吧！</p>
        </div>
        {% endif %}
      </div>
    </div>
    
    <button class="scroll-btn scroll-right" id="scrollRight">→</button>
  </div>

</section>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // 获取DOM元素
  const searchInput = document.getElementById('readingSearch');
  const controlBtns = document.querySelectorAll('.control-btn');
  const bookCards = document.querySelectorAll('.book-card');
  const booksScroll = document.getElementById('booksScroll');
  const scrollLeftBtn = document.getElementById('scrollLeft');
  const scrollRightBtn = document.getElementById('scrollRight');
  
  let currentFilter = 'all';
  let searchKeyword = '';
  
  // 搜索功能
  searchInput.addEventListener('input', function() {
    searchKeyword = this.value.toLowerCase();
    filterBooks();
  });
  
  // 分类筛选
  controlBtns.forEach(btn => {
    btn.addEventListener('click', function() {
      // 移除所有active类
      controlBtns.forEach(b => b.classList.remove('active'));
      // 添加active类到当前点击的按钮
      this.classList.add('active');
      
      currentFilter = this.dataset.filter;
      filterBooks();
    });
  });
  
  // 筛选书籍函数
  function filterBooks() {
    bookCards.forEach(card => {
      const category = card.dataset.category;
      const title = card.dataset.title;
      const author = card.dataset.author;
      const tags = card.dataset.tags;
      
      let showCard = true;
      
      // 分类筛选
      if (currentFilter !== 'all' && category !== currentFilter) {
        showCard = false;
      }
      
      // 搜索筛选
      if (searchKeyword) {
        const matchesSearch = title.includes(searchKeyword) || 
                            author.includes(searchKeyword) || 
                            tags.includes(searchKeyword);
        if (!matchesSearch) {
          showCard = false;
        }
      }
      
      // 显示/隐藏卡片
      card.style.display = showCard ? 'block' : 'none';
    });
    
    // 更新滚动按钮状态
    updateScrollButtons();
  }
  
  // 横向滚动功能
  let scrollPosition = 0;
  const scrollStep = 300; // 每次滚动的距离
  
  scrollLeftBtn.addEventListener('click', function() {
    scrollPosition = Math.max(0, scrollPosition - scrollStep);
    booksScroll.scrollTo({
      left: scrollPosition,
      behavior: 'smooth'
    });
    updateScrollButtons();
  });
  
  scrollRightBtn.addEventListener('click', function() {
    const maxScroll = booksScroll.scrollWidth - booksScroll.clientWidth;
    scrollPosition = Math.min(maxScroll, scrollPosition + scrollStep);
    booksScroll.scrollTo({
      left: scrollPosition,
      behavior: 'smooth'
    });
    updateScrollButtons();
  });
  
  // 更新滚动按钮状态
  function updateScrollButtons() {
    const maxScroll = booksScroll.scrollWidth - booksScroll.clientWidth;
    scrollLeftBtn.style.opacity = scrollPosition > 0 ? '1' : '0.5';
    scrollRightBtn.style.opacity = scrollPosition < maxScroll ? '1' : '0.5';
  }
  
  // 监听滚动事件
  booksScroll.addEventListener('scroll', function() {
    scrollPosition = this.scrollLeft;
    updateScrollButtons();
  });
  
  // 初始化
  updateScrollButtons();
  
  // 处理一级标题显示
  function processH1Titles() {
    console.log('开始处理一级标题...');
    const titleContainers = document.querySelectorAll('.note-titles-container');
    console.log('找到标题容器数量:', titleContainers.length);
    
    titleContainers.forEach((container, index) => {
      const content = container.dataset.content;
      console.log(`容器 ${index} 的内容:`, content ? '有内容' : '无内容');
      
      if (!content) return;
      
      // 将内容按|分割成行
      const lines = content.split('|');
      const h1Titles = [];
      
      // 提取一级标题
      lines.forEach(line => {
        const trimmedLine = line.trim();
        // 匹配 <h1>标题</h1> 格式
        const h1Match = trimmedLine.match(/<h1>(.*?)<\/h1>/);
        if (h1Match) {
          const title = h1Match[1].trim();
          if (title) {
            h1Titles.push(title);
            console.log('找到标题:', title);
          }
        }
      });
      
      // 生成HTML
      if (h1Titles.length > 0) {
        const bookCard = container.closest('.book-card');
        const bookUrl = bookCard.querySelector('.book-title a').href;
        console.log('书籍URL:', bookUrl);
        
        let html = '';
        const maxTitles = 20; // 最多显示20个标题
        const showMore = h1Titles.length > maxTitles;
        
        console.log('标题总数:', h1Titles.length, '最大显示数:', maxTitles, '需要显示更多按钮:', showMore);
        
        // 显示前20个标题
        const titlesToShow = showMore ? h1Titles.slice(0, maxTitles) : h1Titles;
        
        console.log('实际显示标题数:', titlesToShow.length);
        
        titlesToShow.forEach(title => {
          // 修复slug生成逻辑
          const slug = title.toLowerCase()
            .replace(/[^\u4e00-\u9fa5\w\s-]/g, '') // 保留中文、英文、数字、空格、连字符
            .replace(/\s+/g, '-') // 空格替换为连字符
            .replace(/-+/g, '-') // 多个连字符合并为一个
            .replace(/^-|-$/g, '') // 移除首尾连字符
            .trim();
          html += `<div class="note-title-item">
            <a href="${bookUrl}#${slug}" class="note-title-link">${title}</a>
          </div>`;
          console.log('生成链接:', `${bookUrl}#${slug}`);
        });
        
             // 如果有更多标题，添加【更多】按钮
             if (showMore) {
               console.log('添加【更多】按钮，总标题数:', h1Titles.length, '显示数:', maxTitles);

               // 获取第21个标题的slug
               const title21 = h1Titles[20]; // 第21个标题（索引20）
               const slug21 = title21.toLowerCase()
                 .replace(/[^\u4e00-\u9fa5\w\s-]/g, '')
                 .replace(/\s+/g, '-')
                 .replace(/-+/g, '-')
                 .replace(/^-|-$/g, '')
                 .trim();

               html += `<div class="more-button-container">
                 <a href="${bookUrl}#${slug21}" class="more-button">更多...</a>
               </div>`;

               console.log('【更多】按钮HTML已添加，跳转到第21个标题:', title21);
             }
        
        container.innerHTML = html;
        console.log('更新容器内容完成');
      } else {
        container.innerHTML = '<div class="note-placeholder">暂无笔记内容</div>';
        console.log('没有找到标题，显示占位符');
      }
    });
  }
  
  // 页面加载完成后处理标题
  processH1Titles();
});

// 注意：toggleMoreTitles函数已删除，因为【更多...】按钮现在直接跳转到第21个标题
</script>
