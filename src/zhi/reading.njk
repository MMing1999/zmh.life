---
layout: layouts/base.njk
title: "Reading · 阅读"
description: "读书卡片与短评。记录阅读过程中的思考和收获，分享有价值的书籍和文章，建立个人的阅读体系。"
section: "zhi"
pageName: "reading"
pageCSS: "/assets/Css/zhi.css"
---

<!-- Main Content -->
<section class="reading-main">
  
  <!-- Container1: 搜索和分类标签 (固定) -->
  <div class="reading-container1">
    <div class="reading-search-section">
      <div class="search-box">
        <input type="text" id="readingSearch" placeholder="搜索书籍、作者或标签..." />
        <button class="search-btn">🔍</button>
      </div>
    </div>
    
    <div class="reading-filters">
      <div class="filter-group">
        <h4>分类</h4>
        <div class="filter-tags">
          <button class="filter-tag active" data-filter="all">全部</button>
          <button class="filter-tag" data-filter="设计">设计</button>
          <button class="filter-tag" data-filter="技术">技术</button>
          <button class="filter-tag" data-filter="商业">商业</button>
          <button class="filter-tag" data-filter="心理学">心理学</button>
        </div>
      </div>
      
      <div class="filter-group">
        <h4>评分</h4>
        <div class="filter-tags">
          <button class="filter-tag" data-rating="5">★★★★★</button>
          <button class="filter-tag" data-rating="4">★★★★☆</button>
          <button class="filter-tag" data-rating="3">★★★☆☆</button>
        </div>
      </div>
    </div>
  </div>

  <!-- Container2: 书籍卡片横向滚动 -->
  <div class="reading-container2">
    <button class="scroll-btn scroll-left" id="scrollLeft">←</button>
    
    <div class="books-scroll-container" id="booksScroll">
      <div class="books-scroll-track">
        {% for book in collections.reading %}
        <div class="book-card" 
             data-category="{{ book.data.category or '未分类' }}"
             data-rating="{{ book.data.rating or 0 }}"
             data-title="{{ book.data.title | lower }}"
             data-author="{{ book.data.author | lower }}"
             data-tags="{{ book.data.tags | join(' ') | lower }}">
          
          <div class="book-cover">
            {% if book.data.cover %}
              <img src="{{ book.data.cover }}" alt="{{ book.data.title }}">
            {% else %}
              <div class="book-placeholder">
                <span>{{ book.data.title | slice(0, 2) }}</span>
              </div>
            {% endif %}
          </div>
          
          <div class="book-info">
            <div class="book-divider-vertical"></div>
            <div class="book-content">
              <h3 class="book-title">
                <a href="{{ book.url }}">{{ book.data.title }}</a>
              </h3>
              
              <p class="book-author">{{ book.data.author or "未知作者" }}</p>
              
              <div class="book-summary">
                {{ book.data.description or "暂无简介" }}
              </div>
              
              <div class="book-divider"></div>
            </div>
          </div>
        </div>
        {% endfor %}
        
        <!-- 空状态 -->
        {% if collections.reading | length == 0 %}
        <div class="empty-state">
          <h3>暂无读书笔记</h3>
          <p>还没有记录任何读书内容，<a href="/zhi/collection/">去收集一些好书</a>吧！</p>
        </div>
        {% endif %}
      </div>
    </div>
    
    <button class="scroll-btn scroll-right" id="scrollRight">→</button>
  </div>

</section>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // 获取DOM元素
  const searchInput = document.getElementById('readingSearch');
  const filterTags = document.querySelectorAll('.filter-tag');
  const bookCards = document.querySelectorAll('.book-card');
  const booksScroll = document.getElementById('booksScroll');
  const scrollLeftBtn = document.getElementById('scrollLeft');
  const scrollRightBtn = document.getElementById('scrollRight');
  
  let currentFilter = 'all';
  let currentRating = null;
  let searchKeyword = '';
  
  // 搜索功能
  searchInput.addEventListener('input', function() {
    searchKeyword = this.value.toLowerCase();
    filterBooks();
  });
  
  // 分类筛选
  filterTags.forEach(tag => {
    tag.addEventListener('click', function() {
      // 移除所有active类
      filterTags.forEach(t => t.classList.remove('active'));
      // 添加active类到当前点击的标签
      this.classList.add('active');
      
      if (this.dataset.filter) {
        currentFilter = this.dataset.filter;
        currentRating = null;
      } else if (this.dataset.rating) {
        currentRating = parseInt(this.dataset.rating);
        currentFilter = 'all';
      }
      
      filterBooks();
    });
  });
  
  // 筛选书籍函数
  function filterBooks() {
    bookCards.forEach(card => {
      const category = card.dataset.category;
      const rating = parseInt(card.dataset.rating);
      const title = card.dataset.title;
      const author = card.dataset.author;
      const tags = card.dataset.tags;
      
      let showCard = true;
      
      // 分类筛选
      if (currentFilter !== 'all' && category !== currentFilter) {
        showCard = false;
      }
      
      // 评分筛选
      if (currentRating && rating < currentRating) {
        showCard = false;
      }
      
      // 搜索筛选
      if (searchKeyword) {
        const matchesSearch = title.includes(searchKeyword) || 
                            author.includes(searchKeyword) || 
                            tags.includes(searchKeyword);
        if (!matchesSearch) {
          showCard = false;
        }
      }
      
      // 显示/隐藏卡片
      card.style.display = showCard ? 'block' : 'none';
    });
    
    // 更新滚动按钮状态
    updateScrollButtons();
  }
  
  // 横向滚动功能
  let scrollPosition = 0;
  const scrollStep = 300; // 每次滚动的距离
  
  scrollLeftBtn.addEventListener('click', function() {
    scrollPosition = Math.max(0, scrollPosition - scrollStep);
    booksScroll.scrollTo({
      left: scrollPosition,
      behavior: 'smooth'
    });
    updateScrollButtons();
  });
  
  scrollRightBtn.addEventListener('click', function() {
    const maxScroll = booksScroll.scrollWidth - booksScroll.clientWidth;
    scrollPosition = Math.min(maxScroll, scrollPosition + scrollStep);
    booksScroll.scrollTo({
      left: scrollPosition,
      behavior: 'smooth'
    });
    updateScrollButtons();
  });
  
  // 更新滚动按钮状态
  function updateScrollButtons() {
    const maxScroll = booksScroll.scrollWidth - booksScroll.clientWidth;
    scrollLeftBtn.style.opacity = scrollPosition > 0 ? '1' : '0.5';
    scrollRightBtn.style.opacity = scrollPosition < maxScroll ? '1' : '0.5';
  }
  
  // 监听滚动事件
  booksScroll.addEventListener('scroll', function() {
    scrollPosition = this.scrollLeft;
    updateScrollButtons();
  });
  
  // 初始化
  updateScrollButtons();
});
</script>
