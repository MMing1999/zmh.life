---
layout: layouts/base.njk
title: "知 · Knowing"
description: "知识分享与学习记录。这里是我学习、思考、记录的地方。通过观察、收集、阅读、写作四个维度，构建个人的知识体系，分享有价值的内容和见解。"
section: "zhi"
pageName: "zhi"
pageCSS: "/assets/Css/zhi.css"
---

<!-- Main Content Section -->
<section class="main-content">
  <div class="content-container">
    
    <!-- Title -->
    <h1 class="page-title">知 · Knowing</h1>
    
    <!-- Description -->
    <p class="page-description">
      知识分享与学习，记录这是我学习、思考、记录的地方。通过观察、收集、阅读、写作四个维度，
      构建个人的知识体系，分享有价值的内容和见解。
    </p>
    
    <!-- Four Buttons -->
    <div class="buttons-container">
      <a href="/zhi/collection/" class="nav-button" data-tooltip="收集" data-messages='["抓住脑海里一闪而过的念头。", "星星之火，可以燎原。", "混沌的念和秩序的我。"]'>收集</a>
      <a href="/zhi/observation/" class="nav-button" data-tooltip="观察" data-messages='["我以外的世界在塑造我。", "格物致知。", "这是我想分享给你的世界切片。"]'>观察</a>
      <a href="/zhi/writing/" class="nav-button" data-tooltip="写作" data-messages='["用文字将思考和时间储存成意义。", "我在现在书写过去和未来", "写下来就是最小单元的创造。"]'>写作</a>
      <a href="/zhi/reading/" class="nav-button" data-tooltip="阅读" data-messages='["这是我和他/她/它的对话。", "阅读是一次安静的冒险。", "一本书，就是一个小世界。"]'>阅读</a>
    </div>
    
  </div>
</section>

<!-- Knowledge Updates Section -->
<section class="knowledge-section">
  <div class="knowledge-container">
    
    <h2 class="section-title">新知</h2>
    
    <div class="knowledge-layout">
      
      <!-- Left Container (30%) -->
      <div class="knowledge-left">
        <div class="article-titles">
          <ul class="article-list">
            <!-- 动态生成的文章列表 -->
          </ul>
        </div>
      </div>
      
      <!-- Right Container (70%) -->
      <div class="knowledge-right">
        <div class="cover-gallery">
          <!-- 动态生成的封面画廊 -->
        </div>
      </div>
      
    </div>
    
  </div>
</section>

<!-- Old Knowledge and Categories Section -->
<section class="knowledge-section">
  <div class="knowledge-container">
    
    <h2 class="section-title right-align">旧时</h2>
    
    <div class="categories-content">
      <p class="categories-text">
        领域：摄影观察、城市观察、自然观察。专栏：前端开发、技术分享、设计思维。分类：心理学、技术文章、摄影艺术。标签：摄影、前端、CSS、色彩、设计、心理学、认知科学、行为经济学、决策、城市、构图、阅读、学习、思考、方法论、实践。
      </p>
    </div>
    
  </div>
</section>

<!-- Featured Content Section -->
<section class="knowledge-section">
  <div class="knowledge-container">
    
    <h2 class="section-title">精选</h2>
    
    <div class="featured-grid">
      
      <!-- Featured Item 1 -->
      <div class="featured-item">
        <div class="featured-image">
          <img src="/assets/images/1mOp7h_xui-400.webp" alt="设计思维实践" loading="lazy">
        </div>
        <div class="featured-content">
          <div class="featured-meta">
            <span class="featured-category">设计思维</span>
            <span class="featured-date">2024-01-20</span>
          </div>
          <h3 class="featured-title">从用户研究到产品设计的完整流程</h3>
          <p class="featured-excerpt">
            深入探讨如何通过用户研究驱动产品设计，从需求分析到原型制作，再到用户测试的完整方法论。
            结合实际案例，分享在设计过程中的思考和实践经验。
          </p>
          <div class="featured-tags">
            <span class="tag">#用户体验</span>
            <span class="tag">#产品设计</span>
            <span class="tag">#方法论</span>
          </div>
        </div>
      </div>
      
      <!-- Featured Item 2 -->
      <div class="featured-item">
        <div class="featured-image">
          <img src="/assets/images/2mOp7h_xui-400.webp" alt="前端技术分享" loading="lazy">
        </div>
        <div class="featured-content">
          <div class="featured-meta">
            <span class="featured-category">前端开发</span>
            <span class="featured-date">2024-01-15</span>
          </div>
          <h3 class="featured-title">现代CSS布局技巧与最佳实践</h3>
          <p class="featured-excerpt">
            探索CSS Grid、Flexbox等现代布局技术，分享在实际项目中的应用经验和性能优化技巧。
            从基础概念到高级应用，帮助开发者提升前端开发效率。
          </p>
          <div class="featured-tags">
            <span class="tag">#CSS</span>
            <span class="tag">#布局</span>
            <span class="tag">#前端</span>
          </div>
        </div>
      </div>
      
      <!-- Featured Item 3 -->
      <div class="featured-item">
        <div class="featured-image">
          <img src="/assets/images/3mOp7h_xui-400.webp" alt="摄影艺术" loading="lazy">
        </div>
        <div class="featured-content">
          <div class="featured-meta">
            <span class="featured-category">摄影艺术</span>
            <span class="featured-date">2024-01-10</span>
          </div>
          <h3 class="featured-title">城市摄影：捕捉都市生活的韵律</h3>
          <p class="featured-excerpt">
            通过镜头记录城市的变迁与活力，分享城市摄影的构图技巧和后期处理心得。
            从街头摄影到建筑摄影，探索不同视角下的城市美学。
          </p>
          <div class="featured-tags">
            <span class="tag">#摄影</span>
            <span class="tag">#城市</span>
            <span class="tag">#艺术</span>
          </div>
        </div>
      </div>
      
    </div>
    
  </div>
</section>

<script>
document.addEventListener('DOMContentLoaded', function() {
  console.log('DOM已加载，开始初始化...');
  
  const buttons = document.querySelectorAll('.nav-button');
  
  buttons.forEach(button => {
    let messageIndex = 0;
    const messages = JSON.parse(button.getAttribute('data-messages'));
    
    button.addEventListener('mouseenter', function() {
      button.setAttribute('data-tooltip', messages[messageIndex]);
      messageIndex = (messageIndex + 1) % messages.length;
    });
  });
  
  console.log('开始更新新知部分...');
  updateNewKnowledgeDisplay();
  
  console.log('开始更新旧时分类内容...');
  updateOldKnowledgeCategories();
});

async function updateNewKnowledgeDisplay() {
  const allArticles = await getAllArticlesWithLatestUpdate();
  const latest5Articles = allArticles
    .sort((a, b) => new Date(b.latestUpdate) - new Date(a.latestUpdate))
    .slice(0, 5);
  
  console.log('最新的5篇文章:', latest5Articles);
  updatePageDisplay(latest5Articles);
}

async function updateOldKnowledgeCategories() {
  console.log('开始更新旧时分类内容...');
  
  try {
    const allCategories = await getAllCategoriesAndTags();
    console.log('获取到的分类数据:', allCategories);
    
    const fields = [...new Set(allCategories.fields)];
    const columns = [...new Set(allCategories.columns)];
    const categories = [...new Set(allCategories.categories)];
    const tags = [...new Set(allCategories.tags)];
    
  let content = '';
  
  if (fields.length > 0) {
    content += `${fields.join(' / ')} / `;
  }
  
      if (columns.length > 0) {
        content += `${columns.map(col => col.endsWith('专栏') ? col : col + '专栏').join(' / ')} / `;
      }
  
  if (categories.length > 0) {
    content += `${categories.join(' / ')} / `;
  }
  
      if (tags.length > 0) {
        content += `${tags.map(tag => tag.startsWith('#') ? tag : '#' + tag).join(' / ')}`;
      }
    
    console.log('生成的内容:', content);
    
    const categoriesText = document.querySelector('.categories-text');
    console.log('找到的元素:', categoriesText);
    
    if (categoriesText) {
      // 将每个词条包装成可点击的span
      const items = content.split(' / ');
      const clickableItems = items.map(item => {
        const trimmedItem = item.trim();
        if (trimmedItem.includes('专栏')) {
          return `<span class="clickable-item" data-type="writing">${trimmedItem}</span>`;
        } else if (trimmedItem.includes('城市观察') || trimmedItem.includes('自然观察') || trimmedItem.includes('抽象摄影') || trimmedItem.includes('都市摄影') || trimmedItem.includes('生活摄影') || trimmedItem.includes('摄影观察')) {
          return `<span class="clickable-item" data-type="observation">${trimmedItem}</span>`;
        } else if (trimmedItem.includes('心理学') || trimmedItem.includes('商业管理') || trimmedItem.includes('用户体验') || trimmedItem.includes('技术书籍') || trimmedItem.includes('阅读笔记')) {
          return `<span class="clickable-item" data-type="reading">${trimmedItem}</span>`;
        } else {
          return `<span class="clickable-item" data-type="other">${trimmedItem}</span>`;
        }
      });
      
      const styledContent = clickableItems.join(' <span style="color: #ddd;">/</span> ');
      
      categoriesText.innerHTML = styledContent;
      
      // 添加点击事件处理
      categoriesText.addEventListener('click', function(e) {
        const clickedItem = e.target.closest('.clickable-item');
        if (clickedItem) {
          const itemType = clickedItem.getAttribute('data-type');
          const itemText = clickedItem.textContent.trim();
          console.log('点击的词条:', itemText, '类型:', itemType);
          
          // 根据类型决定跳转
          switch(itemType) {
            case 'observation':
              console.log('跳转到观察页面');
              window.location.href = '/zhi/observation/?button=observation&hover=true';
              break;
            case 'writing':
              console.log('跳转到写作页面');
              window.location.href = '/zhi/writing/?button=writing&hover=true';
              break;
            case 'reading':
              console.log('跳转到阅读页面');
              window.location.href = '/zhi/reading/?button=reading&hover=true';
              break;
            default:
              console.log('未匹配到任何类别，词条:', itemText);
          }
        }
      });
      
      console.log('内容已更新');
    } else {
      console.error('未找到 .categories-text 元素');
    }
    
    console.log('分类内容:', { fields, columns, categories, tags });
  } catch (error) {
    console.error('更新旧时分类内容时出错:', error);
  }
}

async function getAllCategoriesAndTags() {
  console.log('开始获取分类和标签数据...');
  
  const result = {
    fields: [],
    columns: [],
    categories: [],
    tags: []
  };
  
  const articleTypes = [
    { type: 'observation', urlPattern: '/zhi/observation/', slugPattern: 'observation' },
    { type: 'writing', urlPattern: '/zhi/writing/', slugPattern: 'writing' },
    { type: 'reading', urlPattern: '/zhi/reading/', slugPattern: 'reading' }
  ];
  
  for (const articleType of articleTypes) {
    const commonSlugs = await getCommonSlugs(articleType.type);
    console.log(`处理 ${articleType.type} 类型，共 ${commonSlugs.length} 篇文章`);
    
    for (const slug of commonSlugs) {
      try {
        const url = `${articleType.urlPattern}${slug}/index.html`;
        console.log(`正在获取: ${url}`);
        const response = await fetch(url);
        
        if (response.ok) {
          const html = await response.text();
          const parser = new DOMParser();
          const doc = parser.parseFromString(html, 'text/html');
          
          // 从HTML中提取meta信息
          const metaTags = doc.querySelectorAll('meta');
          let field = '', column = '', category = '', tags = [];
          
          metaTags.forEach(meta => {
            const name = meta.getAttribute('name') || meta.getAttribute('property');
            const content = meta.getAttribute('content');
            
            if (name === 'field' && content) {
              field = content;
            } else if (name === 'column' && content) {
              column = content;
            } else if (name === 'category' && content) {
              category = content;
            } else if (name === 'tags' && content) {
              try {
                tags = JSON.parse(content);
              } catch (e) {
                tags = content.split(',').map(t => t.trim());
              }
            }
          });
          
          // 只有在meta数据完全缺失时才使用fallback逻辑
          if (!field && !column && !category && tags.length === 0) {
            // 尝试从页面标题或内容中推断分类
            const titleElement = doc.querySelector('h1, .page-title');
            const title = titleElement ? titleElement.textContent.trim() : '';
            
            if (articleType.type === 'observation') {
              // 观察类文章，从标题中提取领域
              if (title.includes('城市')) field = '城市观察';
              else if (title.includes('自然')) field = '自然观察';
              else if (title.includes('抽象')) field = '抽象摄影';
              else if (title.includes('都市')) field = '都市摄影';
              else if (title.includes('生活')) field = '生活摄影';
              else field = '摄影观察';
              
              category = 'observation';
              tags = ['摄影', '观察', '艺术'];
            } else if (articleType.type === 'writing') {
              // 写作类文章，从标题中提取专栏
              if (title.includes('前端') || title.includes('CSS') || title.includes('色彩')) {
                column = 'AI思考专栏';
                category = '技术文章';
                tags = ['前端', 'CSS', '技术', '设计'];
              } else if (title.includes('城市') || title.includes('都市')) {
                column = '设计思考专栏';
                category = '技术文章';
                tags = ['城市', '观察', '技术'];
              } else if (title.includes('抽象') || title.includes('设计')) {
                column = '设计思考专栏';
                category = '设计文章';
                tags = ['抽象', '设计', '艺术'];
              } else if (title.includes('光影') || title.includes('摄影')) {
                column = '全栈开发专栏';
                category = '摄影文章';
                tags = ['光影', '摄影', '艺术'];
              } else {
                column = 'AI思考专栏';
                category = '技术文章';
                tags = ['技术', '分享'];
              }
            } else if (articleType.type === 'reading') {
              // 阅读类文章，从标题中提取分类
              if (title.includes('思考') || title.includes('心理学')) {
                category = '心理学';
                tags = ['心理学', '认知科学', '行为经济学', '决策'];
              } else if (title.includes('创新') || title.includes('创业')) {
                category = '商业管理';
                tags = ['创新', '商业', '管理', '战略'];
              } else if (title.includes('用户体验') || title.includes('设计')) {
                category = '用户体验';
                tags = ['用户体验', '设计', '交互', '可用性'];
              } else if (title.includes('JavaScript') || title.includes('编程')) {
                category = '技术书籍';
                tags = ['JavaScript', '编程', '技术', '前端'];
              } else {
                category = '阅读笔记';
                tags = ['阅读', '学习', '思考'];
              }
            }
          }
          
          console.log(`提取到的信息 - ${slug}:`, { field, column, category, tags });
          
          // 添加到结果中
          if (field) result.fields.push(field);
          if (column) result.columns.push(column);
          if (category) result.categories.push(category);
          if (tags.length > 0) result.tags.push(...tags);
        } else {
          console.log(`无法访问 ${url}: ${response.status}`);
        }
      } catch (error) {
        console.log(`获取 ${articleType.type}/${slug} 分类信息失败:`, error.message);
      }
    }
  }
  
  console.log('最终提取的分类数据:', result);
  return result;
}

async function getAllArticlesWithLatestUpdate() {
  const articles = [];
  
  const articleTypes = [
    { type: 'observation', urlPattern: '/zhi/observation/', slugPattern: 'observation' },
    { type: 'writing', urlPattern: '/zhi/writing/', slugPattern: 'writing' },
    { type: 'reading', urlPattern: '/zhi/reading/', slugPattern: 'reading' }
  ];
  
  for (const articleType of articleTypes) {
    const commonSlugs = await getCommonSlugs(articleType.type);
    
    for (const slug of commonSlugs) {
      try {
        const url = `${articleType.urlPattern}${slug}/index.html`;
        const response = await fetch(url);
        
        if (response.ok) {
          const html = await response.text();
          const parser = new DOMParser();
          const doc = parser.parseFromString(html, 'text/html');
          
          const titleElement = doc.querySelector('h1.reading-title, h1.writing-title, h1.observation-title, .page-title');
          const title = titleElement ? titleElement.textContent.trim() : slug;
          
          const dateElement = doc.querySelector('meta[property="article:published_time"], .article-date, .post-date');
          const date = dateElement ? dateElement.getAttribute('content') || dateElement.textContent.trim() : '2024-01-01';
          
          const h1Elements = doc.querySelectorAll('.reading-body h1, .writing-body h1, .observation-body h1, article h1');
          
          if (h1Elements.length > 0) {
            const latestChapter = h1Elements[h1Elements.length - 1].textContent.trim();
            
            articles.push({
              slug: slug,
              title: title,
              date: date,
              type: articleType.type,
              latestChapter: latestChapter,
              latestUpdate: date,
              url: url
            });
          }
        }
      } catch (error) {
        console.log(`尝试访问 ${articleType.type}/${slug} 失败:`, error.message);
      }
    }
  }
  
  return articles;
}

async function getCommonSlugs(type) {
  try {
    const response = await fetch('/src/_data/articles.js');
    if (response.ok) {
      const configText = await response.text();
      const config = JSON.parse(configText.replace(/module\.exports\s*=\s*/, ''));
      return config[type] ? config[type].map(article => article.slug) : [];
    }
  } catch (error) {
    console.log('无法加载配置文件，使用默认列表');
  }
  
  const slugMap = {
    observation: [
      '抽象构成-010', '城市观察-001', '自然观察-003', '都市掠影-004', 
      '生活记录-002', '光影之路-008', '瞬间捕捉-006', '纹理之美-009', 
      '色彩律动-005', '掌中世界-007'
    ],
    writing: [
      'city-observation', 'urban-snapshot', 'abstract-design', 
      'color-rhythm-frontend', 'light-shadow-photography'
    ],
    reading: [
      'thinking-fast-and-slow', 'innovators-dilemma', 'user-experience-elements',
      'javascript-advanced', 'design-psychology', 'lean-startup'
    ]
  };
  
  return slugMap[type] || [];
}

function updatePageDisplay(articles) {
  const leftList = document.querySelector('.knowledge-section:nth-of-type(2) .article-list');
  if (leftList) {
    leftList.innerHTML = '';
    articles.forEach(article => {
      const li = document.createElement('li');
      li.innerHTML = `<span class="article-date">${article.latestUpdate}</span><a href="${article.url}">${article.latestChapter || article.title}</a>`;
      leftList.appendChild(li);
    });
  }
  
  const coverGallery = document.querySelector('.knowledge-section:nth-of-type(2) .cover-gallery');
  if (coverGallery) {
    coverGallery.innerHTML = '';
    articles.forEach(article => {
      const coverItem = document.createElement('a');
      coverItem.href = article.url;
      coverItem.className = 'cover-item';
      
      let coverImage = '';
      if (article.type === 'observation') {
        coverImage = `/assets/Pics/zhi-observation/${article.slug}-cover.jpg`;
      } else if (article.type === 'reading') {
        coverImage = `/assets/Pics/zhi-reading/${article.slug}-cover.jpg`;
      } else if (article.type === 'writing') {
        coverImage = `/assets/images/zhi-writing/${article.slug}-cover.jpg`;
      }
      
      coverItem.innerHTML = `
        <img src="${coverImage}" alt="${article.latestChapter || article.title}" loading="lazy">
      `;
      
      coverGallery.appendChild(coverItem);
    });
  }
}
</script>