---
layout: layouts/base.njk
title: "知 · Knowing"
description: "知识分享与学习记录。这里是我学习、思考、记录的地方。通过观察、收集、阅读、写作四个维度，构建个人的知识体系，分享有价值的内容和见解。"
section: "zhi"
pageName: "zhi"
pageCSS: "/assets/Css/zhi.css"
---

<!-- Main Content Section -->
<section class="main-content">
  <div class="content-container">
    
    <!-- Title -->
    <h1 class="page-title">知 · Knowing</h1>
    
    <!-- Description -->
    <p class="page-description">
      知识分享与学习，记录这是我学习、思考、记录的地方。通过观察、收集、阅读、写作四个维度，
      构建个人的知识体系，分享有价值的内容和见解。
    </p>
    
    <!-- Four Buttons -->
    <div class="buttons-container">
      <a href="/zhi/collection/" class="nav-button" data-tooltip="收集" data-messages='["抓住脑海里一闪而过的念头。", "星星之火，可以燎原。", "混沌的念和秩序的我。"]'>收集</a>
      <a href="/zhi/observation/" class="nav-button" data-tooltip="观察" data-messages='["我以外的世界在塑造我。", "格物致知。", "这是我想分享给你的世界切片。"]'>观察</a>
      <a href="/zhi/writing/" class="nav-button" data-tooltip="写作" data-messages='["用文字将思考和时间储存成意义。", "我在现在书写过去和未来", "写下来就是最小单元的创造。"]'>写作</a>
      <a href="/zhi/reading/" class="nav-button" data-tooltip="阅读" data-messages='["这是我和他/她/它的对话。", "阅读是一次安静的冒险。", "一本书，就是一个小世界。"]'>阅读</a>
    </div>
    
  </div>
</section>

<!-- Knowledge Updates Section -->
<section class="knowledge-section">
  <div class="knowledge-container">
    
    <h2 class="section-title">新知</h2>
    
    <div class="knowledge-layout">
      
      <!-- Left Container (30%) -->
      <div class="knowledge-left">
        <div class="article-titles">
          <ul class="article-list">
            <!-- 动态生成的文章列表 -->
          </ul>
        </div>
      </div>
      
      <!-- Right Container (70%) -->
      <div class="knowledge-right">
        <div class="cover-gallery">
          <!-- 动态生成的封面画廊 -->
        </div>
      </div>
      
    </div>
    
  </div>
</section>

<!-- Old Knowledge and Categories Section -->
<section class="knowledge-section">
  <div class="knowledge-container">
    
    <h2 class="section-title right-align">旧时</h2>
    
    <div class="categories-content">
      <p class="categories-text">
        领域：摄影观察、城市观察、自然观察。专栏：前端开发、技术分享、设计思维。分类：心理学、技术文章、摄影艺术。标签：摄影、前端、CSS、色彩、设计、心理学、认知科学、行为经济学、决策、城市、构图、阅读、学习、思考、方法论、实践。
      </p>
    </div>
    
  </div>
</section>

<!-- Featured Content Section -->
<section class="knowledge-section">
  <div class="knowledge-container">
    
    <h2 class="section-title">精选</h2>
    
    <div class="featured-grid">
      
      <!-- Featured Item 1 -->
      <div class="featured-item">
        <div class="featured-image">
          <img src="/assets/images/1mOp7h_xui-400.webp" alt="设计思维实践" loading="lazy">
        </div>
        <div class="featured-content">
          <div class="featured-meta">
            <span class="featured-category">设计思维</span>
            <span class="featured-date">2024-01-20</span>
          </div>
          <h3 class="featured-title">从用户研究到产品设计的完整流程</h3>
          <p class="featured-excerpt">
            深入探讨如何通过用户研究驱动产品设计，从需求分析到原型制作，再到用户测试的完整方法论。
            结合实际案例，分享在设计过程中的思考和实践经验。
          </p>
          <div class="featured-tags">
            <span class="tag">#用户体验</span>
            <span class="tag">#产品设计</span>
            <span class="tag">#方法论</span>
          </div>
        </div>
      </div>
      
      <!-- Featured Item 2 -->
      <div class="featured-item">
        <div class="featured-image">
          <img src="/assets/images/2mOp7h_xui-400.webp" alt="前端技术分享" loading="lazy">
        </div>
        <div class="featured-content">
          <div class="featured-meta">
            <span class="featured-category">前端开发</span>
            <span class="featured-date">2024-01-15</span>
          </div>
          <h3 class="featured-title">现代CSS布局技巧与最佳实践</h3>
          <p class="featured-excerpt">
            探索CSS Grid、Flexbox等现代布局技术，分享在实际项目中的应用经验和性能优化技巧。
            从基础概念到高级应用，帮助开发者提升前端开发效率。
          </p>
          <div class="featured-tags">
            <span class="tag">#CSS</span>
            <span class="tag">#布局</span>
            <span class="tag">#前端</span>
          </div>
        </div>
      </div>
      
      <!-- Featured Item 3 -->
      <div class="featured-item">
        <div class="featured-image">
          <img src="/assets/images/3mOp7h_xui-400.webp" alt="摄影艺术" loading="lazy">
        </div>
        <div class="featured-content">
          <div class="featured-meta">
            <span class="featured-category">摄影艺术</span>
            <span class="featured-date">2024-01-10</span>
          </div>
          <h3 class="featured-title">城市摄影：捕捉都市生活的韵律</h3>
          <p class="featured-excerpt">
            通过镜头记录城市的变迁与活力，分享城市摄影的构图技巧和后期处理心得。
            从街头摄影到建筑摄影，探索不同视角下的城市美学。
          </p>
          <div class="featured-tags">
            <span class="tag">#摄影</span>
            <span class="tag">#城市</span>
            <span class="tag">#艺术</span>
          </div>
        </div>
      </div>
      
    </div>
    
  </div>
</section>

<script>
document.addEventListener('DOMContentLoaded', function() {
  console.log('DOM已加载，开始初始化...');
  
  const buttons = document.querySelectorAll('.nav-button');
  
  buttons.forEach(button => {
    let messageIndex = 0;
    const messages = JSON.parse(button.getAttribute('data-messages'));
    
    button.addEventListener('mouseenter', function() {
      button.setAttribute('data-tooltip', messages[messageIndex]);
      messageIndex = (messageIndex + 1) % messages.length;
    });
  });
  
  console.log('开始更新新知部分...');
  updateNewKnowledgeDisplay();
  
  console.log('开始更新旧时分类内容...');
  updateOldKnowledgeCategories();
});

// 新的数据服务类
class ArticleDataService {
  constructor() {
    this.cache = new Map();
    this.cacheTTL = 5 * 60 * 1000; // 5分钟缓存
  }
  
  async getUpdateLog() {
    const cacheKey = 'update-log';
    const cached = this.cache.get(cacheKey);
    
    if (cached && Date.now() - cached.timestamp < this.cacheTTL) {
      console.log('📦 使用缓存数据');
      return cached.data;
    }
    
    try {
      console.log('🌐 正在获取更新日志...');
      const response = await fetch('/assets/data/update-log.json');
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      const data = await response.json();
      console.log('✅ 更新日志获取成功:', data.totalArticles, '篇文章');
      
      this.cache.set(cacheKey, {
        data: data,
        timestamp: Date.now()
      });
      
      return data;
    } catch (error) {
      console.error('❌ 获取更新日志失败:', error);
      return this.getFallbackData();
    }
  }
  
  async getLatestArticles(limit = 5) {
    const logData = await this.getUpdateLog();
    return logData.articles
      .filter(article => article.status === 'published')
      .sort((a, b) => new Date(b.publishDate) - new Date(a.publishDate))
      .slice(0, limit);
  }
  
  async getCategoriesAndTags() {
    const logData = await this.getUpdateLog();
    const publishedArticles = logData.articles.filter(a => a.status === 'published');
    
    return {
      fields: [...new Set(publishedArticles.map(a => a.field).filter(Boolean))],
      columns: [...new Set(publishedArticles.map(a => a.column).filter(Boolean))],
      categories: [...new Set(publishedArticles.map(a => a.category).filter(Boolean))],
      tags: [...new Set(publishedArticles.flatMap(a => a.tags || []))]
    };
  }
  
  getFallbackData() {
    return {
      articles: [],
      statistics: { byType: {}, byCategory: {}, byColumn: {}, byField: {} }
    };
  }
}

// 使用新的数据服务
const articleService = new ArticleDataService();

async function updateNewKnowledgeDisplay() {
  try {
    const latestArticles = await articleService.getLatestArticles(5);
    console.log('最新的5篇文章:', latestArticles);
    updatePageDisplay(latestArticles);
  } catch (error) {
    console.error('更新新知部分失败:', error);
  }
}

async function updateOldKnowledgeCategories() {
  try {
    const categories = await articleService.getCategoriesAndTags();
    console.log('获取到的分类数据:', categories);
    
    const fields = categories.fields;
    const columns = categories.columns;
    const categories_list = categories.categories;
    const tags = categories.tags;
    
    let content = '';
    
    if (fields.length > 0) {
      content += `领域：${fields.join('、')}。`;
    }
    
    if (columns.length > 0) {
      content += `专栏：${columns.join('、')}。`;
    }
    
    if (categories_list.length > 0) {
      content += `分类：${categories_list.join('、')}。`;
    }
    
    if (tags.length > 0) {
      content += `标签：${tags.join('、')}。`;
    }
    
    console.log('生成的内容:', content);
    
    const categoriesText = document.querySelector('.categories-text');
    console.log('找到的元素:', categoriesText);
    
    if (categoriesText) {
      // 将每个词条包装成可点击的span
      const items = content.split(/[。、]/).filter(item => item.trim());
      const clickableItems = items.map(item => {
        const trimmedItem = item.trim();
        if (trimmedItem.includes('专栏')) {
          return `<span class="clickable-item" data-type="writing">${trimmedItem}</span>`;
        } else if (trimmedItem.includes('城市观察') || trimmedItem.includes('自然观察') || trimmedItem.includes('抽象摄影') || trimmedItem.includes('都市摄影') || trimmedItem.includes('生活摄影') || trimmedItem.includes('摄影观察')) {
          return `<span class="clickable-item" data-type="observation">${trimmedItem}</span>`;
        } else if (trimmedItem.includes('心理学') || trimmedItem.includes('商业管理') || trimmedItem.includes('用户体验') || trimmedItem.includes('技术书籍') || trimmedItem.includes('阅读笔记')) {
          return `<span class="clickable-item" data-type="reading">${trimmedItem}</span>`;
        } else {
          return `<span class="clickable-item" data-type="other">${trimmedItem}</span>`;
        }
      });
      
      const styledContent = clickableItems.join(' <span style="color: #ddd;">/</span> ');
      
      categoriesText.innerHTML = styledContent;
      
      // 添加点击事件处理
      categoriesText.addEventListener('click', function(e) {
        const clickedItem = e.target.closest('.clickable-item');
        if (clickedItem) {
          const itemType = clickedItem.getAttribute('data-type');
          const itemText = clickedItem.textContent.trim();
          console.log('点击的词条:', itemText, '类型:', itemType);
          
          // 根据类型决定跳转
          switch(itemType) {
            case 'observation':
              console.log('跳转到观察页面');
              window.location.href = '/zhi/observation/?button=observation&hover=true';
              break;
            case 'writing':
              console.log('跳转到写作页面');
              window.location.href = '/zhi/writing/?button=writing&hover=true';
              break;
            case 'reading':
              console.log('跳转到阅读页面');
              window.location.href = '/zhi/reading/?button=reading&hover=true';
              break;
            default:
              console.log('未匹配到任何类别，词条:', itemText);
          }
        }
      });
      
      console.log('内容已更新');
    } else {
      console.error('未找到 .categories-text 元素');
    }
    
    console.log('分类内容:', { fields, columns, categories: categories_list, tags });
  } catch (error) {
    console.error('更新旧时分类内容时出错:', error);
  }
}

function updatePageDisplay(articles) {
  const leftList = document.querySelector('.knowledge-section:nth-of-type(2) .article-list');
  if (leftList) {
    leftList.innerHTML = '';
    articles.forEach(article => {
      const li = document.createElement('li');
      li.innerHTML = `<span class="article-date">${article.publishDate}</span><a href="${article.url}">${article.title}</a>`;
      leftList.appendChild(li);
    });
  }
  
  const coverGallery = document.querySelector('.knowledge-section:nth-of-type(2) .cover-gallery');
  if (coverGallery) {
    coverGallery.innerHTML = '';
    articles.forEach(article => {
      const coverItem = document.createElement('a');
      coverItem.href = article.url;
      coverItem.className = 'cover-item';
      
      let coverImage = '';
      if (article.type === 'observation') {
        coverImage = `/assets/Pics/zhi-observation/${article.slug.split('-').slice(0, -3).join('-')}-cover.jpg`;
      } else if (article.type === 'reading') {
        coverImage = `/assets/Pics/zhi-reading/${article.slug.split('-').slice(0, -3).join('-')}-cover.jpg`;
      } else if (article.type === 'writing') {
        coverImage = `/assets/images/zhi-writing/${article.slug.split('-').slice(0, -3).join('-')}-cover.jpg`;
      }
      
      coverItem.innerHTML = `
        <img src="${coverImage}" alt="${article.title}" loading="lazy">
      `;
      
      coverGallery.appendChild(coverItem);
    });
  }
}
</script>