---
layout: layouts/base.njk
---

{# =============================
   layouts/reading.njk
   说明：
   - 继承全局骨架 layouts/base.njk
   - 专门用于"阅读详情页"的布局
   - 样式：使用 /assets/Css/reading.css
   - 适用于读书笔记的详情页面
   ============================= #}

{# 添加reading专用CSS #}
<link rel="stylesheet" href="{{ '/assets/Css/reading.css' | url }}">

<article class="reading" itemscope itemtype="https://schema.org/Book">

  {# 书籍信息区域 - 左右分栏布局 #}
  <div class="reading-info-container">
    {# 左侧：书籍封面 #}
    {% if cover %}
      <div class="reading-cover-section">
        <figure class="reading-hero">
          <img src="{{ cover | url }}" alt="{{ title }}" itemprop="image">
        </figure>
      </div>
    {% endif %}

    {# 右侧：书籍信息 #}
    <div class="reading-info-section">
      {# 书名 #}
      {% if title %}
        <h1 class="reading-title" itemprop="name">{{ title }}</h1>
      {% endif %}

      {# 分类 #}
      {% if category %}
        <div class="reading-category">
          <span class="chip">{{ category }}</span>
        </div>
      {% endif %}

      {# 作者 #}
      {% if author %}
        <p class="reading-author" itemprop="author">{{ author }}</p>
      {% endif %}

      {# 简介 #}
      {% if description %}
        <div class="reading-description">
          <p>{{ description }}</p>
        </div>
      {% endif %}
    </div>
  </div>

  <div class="reading-divider"></div>

  {# 4) 读书笔记内容 #}
  <section class="reading-body" itemprop="description">
    {{ content | safe }}
  </section>

  {# 5) 底部返回 #}
  <div class="reading-back">
    <a class="link-back" href="{{ '/zhi/reading/' | url }}">← 返回「知 · Reading」</a>
  </div>
</article>

{# ===== 章节选择目录按钮 ===== #}
<button id="chapterToc" class="chapter-toc" aria-label="章节目录" title="章节目录">
  <img src="/assets/Icons/character.svg" alt="章节目录" />
</button>

<script>
// 为标题添加ID属性并处理锚点跳转
document.addEventListener('DOMContentLoaded', function() {
  // 为所有h1标题添加ID
  const h1Elements = document.querySelectorAll('.reading-body h1');
  h1Elements.forEach(h1 => {
    const title = h1.textContent.trim();
    const slug = title.toLowerCase()
      .replace(/[^\u4e00-\u9fa5\w\s-]/g, '') // 保留中文、英文、数字、空格、连字符
      .replace(/\s+/g, '-') // 空格替换为连字符
      .replace(/-+/g, '-') // 多个连字符合并为一个
      .replace(/^-|-$/g, '') // 移除首尾连字符
      .trim();
    h1.id = slug;
    console.log('为标题添加ID:', title, '->', slug);
  });
  
  // 处理URL中的锚点
  const hash = window.location.hash;
  console.log('检测到锚点:', hash);
  
  if (hash) {
    // 等待页面完全加载后滚动到目标位置
    setTimeout(() => {
      // 解码URL编码的锚点
      const decodedHash = decodeURIComponent(hash);
      console.log('解码后的锚点:', decodedHash);
      
      const targetElement = document.querySelector(decodedHash);
      console.log('找到目标元素:', targetElement);
      
      if (targetElement) {
        // 计算目标位置（navbar下方更多间距）
        const navbarHeight = document.querySelector('.navbar')?.offsetHeight || 0;
        const offset = navbarHeight; // navbar高度 + 额外400px间距，确保标题完全显示在navbar下方
        
        console.log('navbar高度:', navbarHeight);
        console.log('计算偏移量:', offset);
        console.log('目标元素位置:', targetElement.offsetTop);
        
        const targetPosition = targetElement.offsetTop - offset;
        console.log('最终滚动位置:', targetPosition);
        
        window.scrollTo({
          top: Math.max(0, targetPosition),
          behavior: 'smooth'
        });
        
        console.log('执行滚动完成');
      } else {
        console.log('未找到目标元素');
      }
    }, 100);
  } else {
    console.log('没有检测到锚点');
  }
  
  // ===== 章节选择目录按钮功能 =====
  const chapterTocBtn = document.getElementById('chapterToc');
  if (chapterTocBtn) {
    // 显示/隐藏按钮
    function updateChapterTocButton() {
      const overThreshold = window.scrollY > 1000;
      chapterTocBtn.classList.toggle('is-visible', overThreshold);
    }
    
    // 点击按钮显示章节目录
    chapterTocBtn.addEventListener('click', function() {
      // 获取所有h1标题
      const h1Elements = document.querySelectorAll('.reading-body h1');
      
      if (h1Elements.length === 0) {
        alert('暂无章节内容');
        return;
      }
      
      // 创建章节目录
      let tocHtml = '<div class="chapter-toc-modal"><div class="chapter-toc-content"><h3>章节目录</h3><ul>';
      
      h1Elements.forEach((h1, index) => {
        const title = h1.textContent.trim();
        const slug = h1.id;
        const chapterNumber = index + 1; // 从1开始编号
        tocHtml += `<li><a href="#${slug}" class="chapter-link"><span class="chapter-number">${chapterNumber}.</span> ${title}</a></li>`;
      });
      
      tocHtml += '</ul><button class="close-toc">关闭</button></div></div>';
      
      // 添加到页面
      const tocModal = document.createElement('div');
      tocModal.innerHTML = tocHtml;
      document.body.appendChild(tocModal.firstElementChild);
      
      // 添加关闭功能
      const closeBtn = document.querySelector('.close-toc');
      const modal = document.querySelector('.chapter-toc-modal');
      
      closeBtn.addEventListener('click', () => {
        modal.remove();
      });
      
      // 点击背景关闭
      modal.addEventListener('click', (e) => {
        if (e.target === modal) {
          modal.remove();
        }
      });
      
      // 章节链接点击事件
      document.querySelectorAll('.chapter-link').forEach(link => {
        link.addEventListener('click', (e) => {
          e.preventDefault();
          const targetId = link.getAttribute('href').substring(1);
          const targetElement = document.getElementById(targetId);
          
          if (targetElement) {
            const navbarHeight = document.querySelector('.navbar')?.offsetHeight || 0;
            const offset = navbarHeight;
            const targetPosition = targetElement.offsetTop - offset;
            
            window.scrollTo({
              top: Math.max(0, targetPosition),
              behavior: 'smooth'
            });
            
            // 关闭目录
            modal.remove();
          }
        });
      });
    });
    
    // 监听滚动事件
    window.addEventListener('scroll', updateChapterTocButton, { passive: true });
    updateChapterTocButton();
  }
});
</script>
